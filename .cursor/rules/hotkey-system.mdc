---
description: 
globs: 
alwaysApply: false
---
# AutoFish v2.1 热键系统说明

## 热键管理架构
核心实现在 [utils/hotkey_utils.py](mdc:utils/hotkey_utils.py) - 统一的全局热键管理系统

## v2.1 热键配置

### 数据采集模块热键
- **Ctrl+Alt+Y**: 开始截图区域选择并设置类别
- **Y**: 快速截图（需要先设置区域和名称，支持暂停/恢复）
- **Ctrl+Alt+P**: 暂停/恢复Y键截图功能（新增）
- **ESC**: 取消区域选择

### GUI热键自定义功能
- **热键设置界面**: 通过GUI界面自定义所有热键，无需修改配置文件
- **实时检测**: 点击"🎯 点击检测"按钮，按下想要的热键组合即可设置
- **格式支持**: 支持单键（如Y）和组合键（如Ctrl+Alt+Y）
- **实时生效**: 热键配置修改后立即生效，无需重启

### 自动钓鱼模块热键
- **Ctrl+Alt+P**: 暂停/恢复自动钓鱼
- **Ctrl+Alt+Q**: 紧急停止所有操作
- **Ctrl+Alt+R**: 恢复自动钓鱼（从暂停状态）

### 系统全局热键
- **F12**: 热键系统测试和状态检查
- **Ctrl+Alt+H**: 显示热键帮助信息

## 热键配置管理

### 配置文件位置
- **数据采集模块**: [modules/data_collector/config.yaml](mdc:modules/data_collector/config.yaml)
- **全局热键配置**: [config/hotkeys.yaml](mdc:config/hotkeys.yaml)

### 数据采集模块热键配置
```yaml
# 数据采集模块独立热键配置
hotkeys:
  select_region: 'ctrl+alt+y'      # 选择区域并设置类别
  quick_capture: 'y'               # 快速截图
  pause_capture: 'ctrl+alt+p'      # 暂停/恢复截图（新增）
```

### 自动钓鱼模块热键配置
```yaml
# 自动钓鱼模块热键配置
hotkeys:
  # 钓鱼控制
  emergency_stop: 'ctrl+alt+q'     # 紧急停止
  pause_fishing: 'ctrl+alt+p'      # 暂停钓鱼
  resume_fishing: 'ctrl+alt+r'     # 恢复钓鱼
  
  # 系统功能
  test_hotkeys: 'f12'              # 测试热键
  show_help: 'ctrl+alt+h'          # 显示帮助
```

## 热键状态管理

### 智能启用/禁用（数据采集模块）
- **智能管理**: 只有设置好区域和类别后才启用Y键快速截图
- **暂停控制**: 支持单独暂停Y键响应，不影响其他热键
- **状态同步**: 热键状态与界面按钮状态实时同步
- **防误操作**: 暂停时Y键不响应，避免误截图

### 模块间协调
- **独立空间**: 每个模块拥有独立的热键空间和配置
- **冲突检测**: 自动检测和解决模块间热键冲突
- **优先级管理**: 系统热键优先级高于模块热键
- **配置隔离**: 各模块配置文件独立，避免相互影响

## GUI热键自定义系统

### 核心特性
- **可视化配置**: 通过GUI界面配置，用户友好
- **实时检测**: 点击按钮后按下热键即可设置
- **格式验证**: 自动验证热键格式和可用性
- **冲突检测**: 检测热键冲突并提示用户

### 使用方法
1. **打开设置**: 点击主界面"⚙️ 热键设置"按钮
2. **选择热键**: 点击要修改的热键对应的"🎯 点击检测"按钮
3. **按键检测**: 按下想要设置的热键组合
4. **确认保存**: 点击"✅ 保存设置"按钮保存配置
5. **立即生效**: 配置保存后立即生效，无需重启

### 支持的热键格式
- **单键**: `y`, `space`, `enter`, `f1-f12`, `escape`
- **组合键**: `ctrl+y`, `alt+space`, `shift+f1`
- **复合组合**: `ctrl+alt+y`, `ctrl+shift+space`
- **特殊键**: `backspace`, `delete`, `home`, `end`

## 技术实现

### 核心组件（更新）
- **HotkeyManager**: [utils/hotkey_utils.py](mdc:utils/hotkey_utils.py) - 全局热键管理器
- **HotkeyConfigDialog**: [modules/data_collector/hotkey_config_dialog.py](mdc:modules/data_collector/hotkey_config_dialog.py) - GUI热键配置对话框
- **ConfigManager**: [modules/config_manager.py](mdc:modules/config_manager.py) - 热键配置管理
- **Logger**: [modules/logger.py](mdc:modules/logger.py) - 热键操作日志

### 新增特性
- **暂停监听**: 配置热键时暂停全局监听，避免冲突
- **按键检测**: 实时检测用户输入的热键组合
- **配置验证**: 验证热键格式和系统兼容性
- **状态管理**: 智能管理热键启用/禁用状态

## 暂停功能实现

### 数据采集模块暂停
- **简洁设计**: 只暂停Y键响应，不影响其他功能
- **状态同步**: 暂停状态与界面按钮同步显示
- **热键控制**: `Ctrl+Alt+P` 快速暂停/恢复
- **场景适用**: 适合临时暂停、切换应用等场景

### 实现机制
```python
# 暂停状态管理
self.is_capture_paused = False

def toggle_capture_pause(self):
    """切换截图暂停状态"""
    self.is_capture_paused = not self.is_capture_paused
    
def _safe_quick_capture(self):
    """安全的快速截图（支持暂停检查）"""
    if self.is_capture_paused:
        return  # 暂停时不响应
    self._quick_capture()
```

## 权限要求

### Windows系统
- **管理员权限**: 程序自动请求管理员权限
- **游戏兼容**: 确保在游戏中能正常使用全局热键
- **杀毒软件**: 可能需要添加到杀毒软件白名单

### GUI权限要求
- **窗口权限**: GUI热键配置需要窗口焦点权限
- **键盘事件**: 需要监听键盘事件权限

## 热键测试功能

### 测试机制
- **F12测试**: 快速测试所有热键是否正常工作
- **实时反馈**: 实时显示热键工作状态
- **诊断信息**: 帮助用户诊断热键问题
- **配置测试**: 测试新配置的热键是否正常

### 故障排除
- **权限检查**: 验证是否具有足够的系统权限
- **冲突检测**: 检测与其他软件的热键冲突
- **键盘状态**: 检查键盘硬件和驱动状态
- **配置验证**: 验证热键配置文件格式

## 使用指南

### 基本使用
1. **启动程序**: 确保以管理员权限运行
2. **选择模块**: 在主界面选择需要的功能模块
3. **使用热键**: 按照界面提示使用相应热键
4. **查看帮助**: 按Ctrl+Alt+H显示热键帮助

### GUI自定义热键
1. **打开设置**: 点击"⚙️ 热键设置"按钮
2. **选择热键**: 点击要修改的热键对应的"🎯 点击检测"按钮
3. **按键输入**: 按下想要设置的热键组合
4. **保存生效**: 点击"✅ 保存设置"立即生效

### 暂停功能使用
1. **快速暂停**: 按 `Ctrl+Alt+P` 暂停Y键截图
2. **界面暂停**: 点击"⏸️ 暂停"按钮
3. **状态查看**: 观察按钮文字显示当前状态
4. **恢复截图**: 再次按热键或点击"▶️ 恢复"按钮

## 开发接口

### 注册热键
```python
from utils.hotkey_utils import HotkeyManager

# 创建热键管理器
hotkey_manager = HotkeyManager()

# 注册热键回调
def on_screenshot():
    if not self.is_capture_paused:  # 支持暂停检查
        print("截图热键被触发")

hotkey_manager.register_hotkey('ctrl+alt+y', on_screenshot)
```

### 暂停控制
```python
# 暂停/恢复特定热键响应
def toggle_capture_pause(self):
    self.is_capture_paused = not self.is_capture_paused
    self.update_pause_button_text()

# 带暂停检查的热键回调
def _safe_hotkey_callback(self):
    if self.is_capture_paused:
        return
    self._actual_callback()
```

### GUI热键配置
```python
from modules.data_collector.hotkey_config_dialog import HotkeyConfigDialog

# 打开热键配置对话框
def open_hotkey_config(self):
    dialog = HotkeyConfigDialog(self.root, self.config_manager)
    dialog.run()
```

## 更新日志

### v2.1.0 (当前版本)
- ✨ 新增暂停截图功能 (`Ctrl+Alt+P`)
- ✨ GUI热键自定义界面，无需修改配置文件
- ✨ 智能热键启用/禁用管理
- ✨ 暂停监听机制，避免配置时冲突
- ✨ 增强热键检测和验证功能

### v2.0.0
- 🎉 模块化热键系统架构
- 🔧 独立的热键配置管理
- 📊 完善的热键状态追踪
- 🛡️ 权限管理和兼容性优化

## 安全考虑

### 隐私保护
- **本地处理**: 所有热键操作仅在本地处理
- **无网络传输**: 不会向外部发送任何热键信息
- **权限最小化**: 仅请求必要的系统权限
- **配置加密**: 敏感配置信息本地加密存储

### 稳定性保证
- **异常处理**: 完善的异常处理机制
- **资源清理**: 程序退出时自动清理热键注册
- **冲突避免**: 智能检测和避免热键冲突
- **状态管理**: 可靠的热键状态管理机制

